(function() {
    var type_impls = Object.fromEntries([["libsignal_protocol",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Key%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/libsignal_protocol/kem.rs.html#300\">Source</a><a href=\"#impl-Clone-for-Key%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"libsignal_protocol/kem/trait.KeyKind.html\" title=\"trait libsignal_protocol::kem::KeyKind\">KeyKind</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"libsignal_protocol/kem/struct.Key.html\" title=\"struct libsignal_protocol::kem::Key\">Key</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/libsignal_protocol/kem.rs.html#300\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","libsignal_protocol::kem::PublicKey","libsignal_protocol::kem::SecretKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConstantTimeEq-for-Key%3CPublic%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/libsignal_protocol/kem.rs.html#393-404\">Source</a><a href=\"#impl-ConstantTimeEq-for-Key%3CPublic%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConstantTimeEq.html\" title=\"trait subtle::ConstantTimeEq\">ConstantTimeEq</a> for <a class=\"struct\" href=\"libsignal_protocol/kem/struct.Key.html\" title=\"struct libsignal_protocol::kem::Key\">Key</a>&lt;<a class=\"enum\" href=\"libsignal_protocol/kem/enum.Public.html\" title=\"enum libsignal_protocol::kem::Public\">Public</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.ct_eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/libsignal_protocol/kem.rs.html#398-403\">Source</a><a href=\"#method.ct_eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConstantTimeEq.html#tymethod.ct_eq\" class=\"fn\">ct_eq</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"struct\" href=\"https://docs.rs/subtle/2.6.0/subtle/struct.Choice.html\" title=\"struct subtle::Choice\">Choice</a></h4></section></summary><div class=\"docblock\"><p>A constant-time comparison as long as the two keys have a matching type.</p>\n<p>If the two keys have different types, the comparison short-circuits,\nmuch like comparing two slices of different lengths.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ct_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.6.0/src/subtle/lib.rs.html#284\">Source</a><a href=\"#method.ct_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConstantTimeEq.html#method.ct_ne\" class=\"fn\">ct_ne</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"struct\" href=\"https://docs.rs/subtle/2.6.0/subtle/struct.Choice.html\" title=\"struct subtle::Choice\">Choice</a></h4></section></summary><div class='docblock'>Determine if two items are NOT equal. <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConstantTimeEq.html#method.ct_ne\">Read more</a></div></details></div></details>","ConstantTimeEq","libsignal_protocol::kem::PublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Key%3CPublic%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/libsignal_protocol/kem.rs.html#336-357\">Source</a><a href=\"#impl-Key%3CPublic%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"libsignal_protocol/kem/struct.Key.html\" title=\"struct libsignal_protocol::kem::Key\">Key</a>&lt;<a class=\"enum\" href=\"libsignal_protocol/kem/enum.Public.html\" title=\"enum libsignal_protocol::kem::Public\">Public</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encapsulate\" class=\"method\"><a class=\"src rightside\" href=\"src/libsignal_protocol/kem.rs.html#340-356\">Source</a><h4 class=\"code-header\">pub fn <a href=\"libsignal_protocol/kem/struct.Key.html#tymethod.encapsulate\" class=\"fn\">encapsulate</a>&lt;R: <a class=\"trait\" href=\"https://rust-random.github.io/rand/rand_core/trait.CryptoRng.html\" title=\"trait rand_core::CryptoRng\">CryptoRng</a>&gt;(\n    &amp;self,\n    csprng: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;mut R</a>,\n) -&gt; <a class=\"type\" href=\"libsignal_protocol/error/type.Result.html\" title=\"type libsignal_protocol::error::Result\">Result</a>&lt;(<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.u8.html\">u8</a>]&gt;, <a class=\"type\" href=\"libsignal_protocol/kem/type.SerializedCiphertext.html\" title=\"type libsignal_protocol::kem::SerializedCiphertext\">SerializedCiphertext</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Create a <code>SharedSecret</code> and a <code>Ciphertext</code>. The <code>Ciphertext</code> can be safely sent to the\nholder of the corresponding <code>SecretKey</code> who can then use it to <code>decapsulate</code> the same\n<code>SharedSecret</code>.</p>\n</div></details></div></details>",0,"libsignal_protocol::kem::PublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Key%3CSecret%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/libsignal_protocol/kem.rs.html#359-375\">Source</a><a href=\"#impl-Key%3CSecret%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"libsignal_protocol/kem/struct.Key.html\" title=\"struct libsignal_protocol::kem::Key\">Key</a>&lt;<a class=\"enum\" href=\"libsignal_protocol/kem/enum.Secret.html\" title=\"enum libsignal_protocol::kem::Secret\">Secret</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decapsulate\" class=\"method\"><a class=\"src rightside\" href=\"src/libsignal_protocol/kem.rs.html#362-374\">Source</a><h4 class=\"code-header\">pub fn <a href=\"libsignal_protocol/kem/struct.Key.html#tymethod.decapsulate\" class=\"fn\">decapsulate</a>(&amp;self, ct_bytes: &amp;<a class=\"type\" href=\"libsignal_protocol/kem/type.SerializedCiphertext.html\" title=\"type libsignal_protocol::kem::SerializedCiphertext\">SerializedCiphertext</a>) -&gt; <a class=\"type\" href=\"libsignal_protocol/error/type.Result.html\" title=\"type libsignal_protocol::error::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.u8.html\">u8</a>]&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Decapsulates a <code>SharedSecret</code> that was encapsulated into a <code>Ciphertext</code> by a holder of\nthe corresponding <code>PublicKey</code>.</p>\n</div></details></div></details>",0,"libsignal_protocol::kem::SecretKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Key%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/libsignal_protocol/kem.rs.html#306-334\">Source</a><a href=\"#impl-Key%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"libsignal_protocol/kem/trait.KeyKind.html\" title=\"trait libsignal_protocol::kem::KeyKind\">KeyKind</a>&gt; <a class=\"struct\" href=\"libsignal_protocol/kem/struct.Key.html\" title=\"struct libsignal_protocol::kem::Key\">Key</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method\"><a class=\"src rightside\" href=\"src/libsignal_protocol/kem.rs.html#309-321\">Source</a><h4 class=\"code-header\">pub fn <a href=\"libsignal_protocol/kem/struct.Key.html#tymethod.deserialize\" class=\"fn\">deserialize</a>(value: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"libsignal_protocol/error/type.Result.html\" title=\"type libsignal_protocol::error::Result\">Result</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Create a <code>Key&lt;Kind&gt;</code> instance from a byte string created with the\nfunction <code>Key&lt;Kind&gt;::serialize(&amp;self)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method\"><a class=\"src rightside\" href=\"src/libsignal_protocol/kem.rs.html#323-328\">Source</a><h4 class=\"code-header\">pub fn <a href=\"libsignal_protocol/kem/struct.Key.html#tymethod.serialize\" class=\"fn\">serialize</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.u8.html\">u8</a>]&gt;</h4></section></summary><div class=\"docblock\"><p>Create a binary representation of the key that includes a protocol identifier.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.key_type\" class=\"method\"><a class=\"src rightside\" href=\"src/libsignal_protocol/kem.rs.html#331-333\">Source</a><h4 class=\"code-header\">pub fn <a href=\"libsignal_protocol/kem/struct.Key.html#tymethod.key_type\" class=\"fn\">key_type</a>(&amp;self) -&gt; <a class=\"enum\" href=\"libsignal_protocol/kem/enum.KeyType.html\" title=\"enum libsignal_protocol::kem::KeyType\">KeyType</a></h4></section></summary><div class=\"docblock\"><p>Return the <code>KeyType</code> that identifies the KEM protocol for this key.</p>\n</div></details></div></details>",0,"libsignal_protocol::kem::PublicKey","libsignal_protocol::kem::SecretKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Key%3CPublic%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/libsignal_protocol/kem.rs.html#406-410\">Source</a><a href=\"#impl-PartialEq-for-Key%3CPublic%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"libsignal_protocol/kem/struct.Key.html\" title=\"struct libsignal_protocol::kem::Key\">Key</a>&lt;<a class=\"enum\" href=\"libsignal_protocol/kem/enum.Public.html\" title=\"enum libsignal_protocol::kem::Public\">Public</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/libsignal_protocol/kem.rs.html#407-409\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","libsignal_protocol::kem::PublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26%5Bu8%5D%3E-for-Key%3CPublic%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/libsignal_protocol/kem.rs.html#377-383\">Source</a><a href=\"#impl-TryFrom%3C%26%5Bu8%5D%3E-for-Key%3CPublic%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.u8.html\">u8</a>]&gt; for <a class=\"struct\" href=\"libsignal_protocol/kem/struct.Key.html\" title=\"struct libsignal_protocol::kem::Key\">Key</a>&lt;<a class=\"enum\" href=\"libsignal_protocol/kem/enum.Public.html\" title=\"enum libsignal_protocol::kem::Public\">Public</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/libsignal_protocol/kem.rs.html#378\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"libsignal_protocol/error/enum.SignalProtocolError.html\" title=\"enum libsignal_protocol::error::SignalProtocolError\">SignalProtocolError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/libsignal_protocol/kem.rs.html#380-382\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"libsignal_protocol/error/type.Result.html\" title=\"type libsignal_protocol::error::Result\">Result</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&[u8]>","libsignal_protocol::kem::PublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26%5Bu8%5D%3E-for-Key%3CSecret%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/libsignal_protocol/kem.rs.html#385-391\">Source</a><a href=\"#impl-TryFrom%3C%26%5Bu8%5D%3E-for-Key%3CSecret%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.u8.html\">u8</a>]&gt; for <a class=\"struct\" href=\"libsignal_protocol/kem/struct.Key.html\" title=\"struct libsignal_protocol::kem::Key\">Key</a>&lt;<a class=\"enum\" href=\"libsignal_protocol/kem/enum.Secret.html\" title=\"enum libsignal_protocol::kem::Secret\">Secret</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/libsignal_protocol/kem.rs.html#386\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"libsignal_protocol/error/enum.SignalProtocolError.html\" title=\"enum libsignal_protocol::error::SignalProtocolError\">SignalProtocolError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/libsignal_protocol/kem.rs.html#388-390\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"libsignal_protocol/error/type.Result.html\" title=\"type libsignal_protocol::error::Result\">Result</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&[u8]>","libsignal_protocol::kem::SecretKey"],["<section id=\"impl-Eq-for-Key%3CPublic%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/libsignal_protocol/kem.rs.html#412\">Source</a><a href=\"#impl-Eq-for-Key%3CPublic%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"libsignal_protocol/kem/struct.Key.html\" title=\"struct libsignal_protocol::kem::Key\">Key</a>&lt;<a class=\"enum\" href=\"libsignal_protocol/kem/enum.Public.html\" title=\"enum libsignal_protocol::kem::Public\">Public</a>&gt;</h3></section>","Eq","libsignal_protocol::kem::PublicKey"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[19469]}