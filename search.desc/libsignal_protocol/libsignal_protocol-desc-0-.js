searchState.loadedDescShard("libsignal_protocol", 0, "Rust implementation of the <strong>Signal Protocol</strong> for asynchronous\nA service ID representing an ACI (“ACcount Identifier”…\nAn Aci.\nAn ACI\nThe type used in memory to represent a <em>device</em>, i.e. a …\nEach Signal message can be considered to have exactly two …\nThe result of saving a new identity key for a protocol …\nA public key that represents the identity of a user.\nThe private identity of a user.\nInterface defining the identity store, which may be …\nReference implementation of traits::IdentityKeyStore.\nReference implementation of traits::KyberPreKeyStore.\nReference implementation of traits::PreKeyStore.\nReference implementation of traits::SenderKeyStore.\nReference implementation of traits::SessionStore.\nReference implementation of traits::ProtocolStore.\nReference implementation of traits::SignedPreKeyStore.\nA unique identifier selecting among this client’s known …\nInterface for storing signed Kyber pre-keys downloaded …\nThe protocol address didn’t have an identity key or had …\nA service ID representing a PNI (“Phone Number Identifier…\nA Pni.\nA PNI\nA unique identifier selecting among this client’s known …\nInterface for storing pre-keys downloaded from a server.\nRepresents a unique Signal client instance as …\nMixes in all the store interfaces defined in this module.\nWe are in the context of receiving a message.\nThe new identity key replaced a different key for the …\nA parsed representation of a Sealed Sender v2 SentMessage.\nRepresents a single recipient in an SSv2 SentMessage.\nInterface for storing sender key records, allowing …\nWe are in the context of sending a message.\nA Signal service ID, which can be one of various types.\nThe fixed-width binary representation of a ServiceId.\nKnown types of ServiceId.\nInterface for a Signal client instance to store a session …\nA unique identifier selecting among this client’s known …\nInterface for storing signed pre-keys downloaded from a …\nTimestamp recorded as milliseconds since the Unix epoch.\nReturns all registered Kyber pre-key ids\nReturns all registered Kyber pre-key ids\nReturns all registered pre-key ids\nReturns all registered pre-key ids\nReturns all registered signed pre-key ids\nReturns all registered signed pre-key ids\nA constant-time comparison as long as the two keys have a …\nDeserialize a public identity from a byte slice.\nAn identifier representing a particular Signal client …\nThe recipient’s devices and their registration IDs. May …\nFor testing\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvenience constructor from a boolean <code>changed</code> flag.\nGenerate a random new identity from randomness in <code>csprng</code>.\nReturn the public identity for the given <code>address</code>, if known.\nReturn the single specific identity the store is assumed …\nLook up the signed kyber pre-key corresponding to …\nReturn a u32 specific to this store instance.\nLook up the pre-key corresponding to <code>prekey_id</code>.\nLook up the signed pre-key corresponding to …\nReturn the public identity of this user.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn whether an identity is trusted for the role …\nKeys and protocol functions for standard key encapsulation …\nThe kind of service ID <code>self</code> is.\nBulk version of <code>SessionStore::load_session</code>.\nLook up the entry corresponding to …\nLook up the session corresponding to <code>address</code>.\nMark the entry for <code>kyber_prekey_id</code> as “used”. This …\nA unique identifier for the target user. This is usually a …\nCreates a new <code>DeviceId</code> if the value is in range.\nCreate a new address.\nInitialize a public-facing identity from a public key.\nCreate a key pair from a public <code>identity_key</code> and a private …\nCreate a new instance.\nCreate an empty pre-key store.\nCreate an empty signed pre-key store.\nCreate an empty kyber pre-key store.\nCreate an empty session store.\nCreate an empty sender key store.\nCreate an object with the minimal implementation of …\nCreates a new <code>DeviceId</code> if the value is in range.\nReturns the offset of the shared bytes within the full …\nParses the message, or produces an error if the message is …\nParses from the standard binary representation, returning …\nParses from the standard binary representation, returning …\nParses from the standard String representation, returning …\nReturn the private key that defines this identity.\nReturn the public key representing this identity.\nReturn the public key that defines this identity.\nReturns the range within the full message of <code>recipient</code>’s …\nReturns the UUID inside this service ID, discarding the …\nReturns a slice of slices that, when concatenated, form …\nThe parsed list of recipients, grouped by ServiceId.\nRemove the entry for <code>prekey_id</code>.\nClear the mapping of known keys.\nRecord an identity into the store. The identity is then …\nSet the entry for <code>kyber_prekey_id</code> to the value of <code>record</code>.\nSet the entry for <code>prekey_id</code> to the value of <code>record</code>.\nSet the entry for <code>signed_prekey_id</code> to the value of <code>record</code>.\nDecrypt a Sealed Sender message <code>ciphertext</code> in either the …\nDecrypt the payload of a sealed-sender message in either …\nEncrypt the plaintext message <code>ptext</code>, generate an …\nThis method implements the single-key single-recipient KEM …\nThis method implements a single-key multi-recipient KEM as …\nReturn an owned byte slice which can be deserialized with …\nReturn a byte slice which can later be deserialized with …\nThe standard variable-width binary representation for a …\nThe standard fixed-width binary representation for a …\nThe standard string representation for a Signal service ID.\nGenerate a signature claiming that <code>other</code> represents the …\nAssign <code>record</code> to the entry for <code>(sender, distribution_id)</code>.\nSet the entry for <code>address</code> to the value of <code>record</code>.\nConstructs a ProtocolAddress from this service ID and a …\nGiven a trusted identity <code>self</code>, verify that <code>other</code> …\nThe version byte at the head of the message.\nerror in method call ‘{0}’: {1}\nbad KEM ciphertext length &lt;{1}&gt; for key with type &lt;{0}&gt;\nbad KEM key length &lt;{1}&gt; for key with type &lt;{0}&gt;\nbad KEM key type &lt;{0:#04x}&gt;\nbad key length &lt;{1}&gt; for key with type &lt;{0}&gt;\nbad key type &lt;{0:#04x}&gt;\nciphertext serialized bytes were too short &lt;{0}&gt;\nmessage with old counter {0} / {1}\nContains the error value\nerror while invoking an ffi callback: {0}\nfingerprint parsing error\nfingerprint version number mismatch them {0} us {1}\ninvalid argument: {0}\ninvalid Kyber prekey identifier\ninvalid MAC key length &lt;{0}&gt;\ninvalid {0:?} message: {1}\ninvalid prekey identifier\nprotobuf encoding was invalid\nprotocol address is invalid: {name}.{device_id}\nsession for {0} has invalid registration ID {1:X}\ninvalid sealed sender message: {0}\ninvalid sender key session with distribution ID …\ninvalid session: {0}\ninvalid signed prekey identifier\ninvalid state for call to {0} to succeed: {1}\nciphertext version was too old &lt;{0}&gt;\nno key type identifier\nmissing sender key state for distribution ID …\nContains the success value\nself send of a sealed sender message\nsession with {0} not found\ninvalid signature detected\nunknown sealed sender message version {0}\nciphertext version was unrecognized &lt;{0}&gt;\nunrecognized message version &lt;{0}&gt;\nuntrusted identity for address {0}\nunexpected KEM key type &lt;{0:#04x}&gt; (expected &lt;{1:#04x}&gt;)\nConvenience factory for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA public/secret key pair for a KEM protocol.\nDesignates a supported KEM protocol\nKyber1024 key\nA KEM public key with the ability to encapsulate a shared …\nA KEM secret key with the ability to decapsulate a shared …\nA constant-time comparison as long as the two keys have a …\nDecapsulates a <code>SharedSecret</code> that was encapsulated into a …\nCreate a <code>Key&lt;Kind&gt;</code> instance from a byte string created …\nCreate a <code>SharedSecret</code> and a <code>Ciphertext</code>. The <code>Ciphertext</code> can …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize public and secret keys that were serialized by …\nCreates a public-secret key pair for a specified KEM …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the <code>KeyType</code> that identifies the KEM protocol for …\nCreate a binary representation of the key that includes a …")